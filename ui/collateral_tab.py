# ui/collateral_tab.py
from PyQt5.QtWidgets import (
    QWidget, QLabel, QVBoxLayout, QScrollArea, QFormLayout, QLineEdit, 
    QPushButton, QStackedLayout, QGroupBox, QHBoxLayout, QMessageBox)
from PyQt5.QtCore import Qt, QSize
from PyQt5.QtGui import QIcon

from context import current_session
from signal_bus import signal_bus
from models.collateral_model import (save_collateral_info,
                                save_affiliated_institutions, 
                                save_property_info,
                                save_family_info,
                                save_income_expense )
from utils.converter import convert_to_nepali_digits

class CollateralTab(QWidget):
    def __init__(self):
        super().__init__()
  

        self.main_layout = QVBoxLayout()
       

        # üìå Header Group
        header_group = QGroupBox("üìã Associated Member Information")
        header_layout = QFormLayout()
        self.header_label = QLabel("üìå No member selected")
        self.header_label.setStyleSheet("font-size: 16px; font-weight: bold; color: green; padding: 4px;")
        header_layout.addRow(self.header_label)
        header_group.setLayout(header_layout)
        self.main_layout.addWidget(header_group)

        # Apply styles
        self.setStyleSheet("""
            QWidget {
                    font-family: Arial;
                    font-size: 14px
           }
            
            QLabel {
                    color: #333;
                    min-width: 150px;
            }
            QLineEdit, QDateEdit {
                           border: 1px solid #ddd;
                           border-radius: 4px;
                           padding: 8px;
                           min-width:250px;
                           background-color: white;
            }
            QLineEdit:focus, QDateEdit:focus {
                        border: 1px solid #3498db;
            }
            QPushButton {
                           background-color: #4CAF50;
                           color: white;
                           border: none;
                           padding: 10px 15px;
                           border-radius: 4px;
                           min-width: 100px;
                           }
            QPushButton:hover {
                           background-color: #45a049;
                           }                        
        """)
      

        self.stack = QStackedLayout()
        self.main_layout.addLayout(self.stack)    

        # Basic form "‡§ñ‡§∞‡§ñ‡§æ‡§Å‡§ö‡•ã"
        self.basic_widget = QWidget()
        self.basic_form_layout = QFormLayout(self.basic_widget)
        self.basic_form_layout.addRow(QLabel("‡§ñ‡§∞‡§ñ‡§æ‡§Å‡§ö‡•ã ‡§ã‡§£ ‡§¨‡§ö‡§§ ‡§∞‡•ã‡§ï‡•ç‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£:"))
        
        self.monthly_saving = QLineEdit()
        self.basic_form_layout.addRow("‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§¨‡§ö‡§§‡§É", self.monthly_saving)
        self.child_saving = QLineEdit()
        self.basic_form_layout.addRow("‡§¨‡§æ‡§≤ ‡§¨‡§ö‡§§‡§É", self.child_saving)

        for field in [self.monthly_saving, self.child_saving]:
            field.editingFinished.connect(self.update_total_saving)

        self.total_saving = QLineEdit()
        self.basic_form_layout.addRow("‡§ï‡•Å‡§≤ ‡§¨‡§ö‡§§:", self.total_saving)

        self.next_button = QPushButton("Save")
        self.next_button.setIcon(QIcon('icons/icon_btn.png'))
        self.next_button.setFixedWidth(220)
        # self.next_button.setIconSize(QSize(25, 25))
        # self.next_button.setStyleSheet("QPushButton::menu-indicator { padding-left: 6px; }"
        #                        "QPushButton { text-align: center; padding-left: 10px; }")
        # self.next_button.setStyleSheet("QPushButton { padding-left: 10px; }")
        self.next_button.clicked.connect(self.save_basic_collateral_data)
        # self.basic_form_layout.addRow(self.next_button)
       
        
        next_button_layout = QHBoxLayout()        
        next_button_layout.addWidget(self.next_button, alignment=Qt.AlignCenter)
        self.basic_form_layout.addRow(next_button_layout)
        
       

        # Extended Form

        self.extended_widget = QWidget()
        self.extended_layout = QVBoxLayout(self.extended_widget)

        # Section 1: ‡§∏‡§Æ‡•ç‡§¨‡§¶‡•ç‡§ß ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£
        self.affiliated_group = self.create_dynamic_group(
            title = "üìå ‡§∏‡§Æ‡•ç‡§¨‡§¶‡•ç‡§ß ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£",
            fields = [
                "‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ / ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø‡§ï‡•ã ‡§®‡§æ‡§Æ", 
                "‡§†‡•á‡§ó‡§æ‡§®‡§æ", 
                "‡§™‡§¶", 
                "‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§ï‡•à‡§´‡§ø‡§Ø‡§§"
            ]
        )
        self.extended_layout.addWidget(self.affiliated_group["groupbox"])

        # Section 2: ‡§ò‡§∞ ‡§ú‡§ó‡•ç‡§ó‡§æ‡§ï‡•ã ‡§ß‡§ø‡§§‡•ã‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£
        self.property_collateral_group = self.create_dynamic_group(
            title = "üèöÔ∏è ‡§ò‡§∞ ‡§ú‡§ó‡•ç‡§ó‡§æ‡§ï‡•ã ‡§ß‡§ø‡§§‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£",
            fields = [
                "‡§ú‡§ó‡•ç‡§ó‡§æ ‡§ß‡§®‡•Ä‡§ï‡•ã ‡§®‡§æ‡§Æ",
                "‡§¨‡§æ‡§¨‡•Å / ‡§™‡§§‡§ø",
                "‡§¨‡§æ‡§ú‡•á / ‡§∏‡§∏‡•Å‡§∞‡§æ",
                "‡§ú‡§ø‡§≤‡•ç‡§≤‡§æ",
                "‡§®.‡§™‡§æ./ ‡§ó‡§æ.‡§™‡§æ. ",
                "‡§∏‡§ø‡§ü ‡§®‡§Ç",
                "‡§µ‡§°‡§æ ‡§®‡§Ç",
                "‡§ï‡§ø‡§§‡•ç‡§§‡§æ ‡§®‡§Ç",
                "‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≤",
                "‡§ï‡§ø‡§∏‡§ø‡§Æ"
            ]
        )
        self.extended_layout.addWidget(self.property_collateral_group["groupbox"])

        # Section 3: ‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡•Ä‡§ï ‡§µ‡§ø‡§µ‡§∞‡§£
        self.family_group = self.create_dynamic_group(
            title = "üë©‚Äçüë©‚Äçüëß ‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡•Ä‡§ï ‡§µ‡§ø‡§µ‡§∞‡§£",
            fields = [
                "‡§®‡§æ‡§Æ",
                "‡§â‡§Æ‡•á‡§∞",
                "‡§ã‡§£ ‡§Æ‡§æ‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§∏‡§Å‡§ó‡§ï‡•ã ‡§®‡§æ‡§§‡§æ",
                "‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§Æ‡§æ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§≠‡§è ‡§®‡§≠‡§è‡§ï‡•ã",
                "‡§™‡•á‡§∂‡§æ",
                "‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§Ü‡§Ø"
            ]
        )
        self.extended_layout.addWidget(self.family_group["groupbox"])

        # Section 4: ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä ‡§∞ ‡§ñ‡§∞‡•ç‡§ö ‡§µ‡§ø‡§µ‡§∞‡§£
        self.income_expense_group = self.create_dynamic_group(
            title = "üí∞ ‡§ã‡§£‡•Ä‡§ï‡•ã ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä ‡§∞ ‡§ñ‡§∞‡•ç‡§ö‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£",
            fields = [
                "‡§ò‡§∞‡§≠‡§æ‡§°‡§æ ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§§‡§≤‡§¨ / ‡§ú‡•ç‡§Ø‡§æ‡§≤‡§æ ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø‡§ï‡•ã ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§ï‡•É‡§∑‡§ø‡§¨‡§æ‡§ü ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§µ‡•à‡§¶‡•á‡§∂‡§ø‡§ï ‡§∞‡•ã‡§ú‡§ó‡§æ‡§∞ ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§ï‡§Æ‡§ø‡§∏‡§® ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡•Ä‡§ï ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§Ö‡§®‡•ç‡§Ø ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§ò‡§∞‡§≠‡§æ‡§°‡§æ / ‡§µ‡§ø‡§ú‡•Å‡§≤‡•Ä / ‡§™‡§æ‡§®‡•Ä, ‡§ï‡•á‡§µ‡§≤ ‡§ñ‡§∞‡•ç‡§ö",
                "‡§∏‡§û‡•ç‡§ö‡§æ‡§∞ ‡§ñ‡§∞‡•ç‡§ö",
                "‡§∞‡§æ‡§∏‡§® / ‡§≤‡§§‡•ç‡§§‡§æ‡§ï‡§™‡§°‡§æ",
                "‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ/‡§î‡§∑‡§ß‡•Ä ‡§â‡§™‡§ö‡§æ‡§∞ ‡§ñ‡§∞‡•ç‡§ö",
                "‡§Ö‡§®‡•ç‡§Ø ‡§µ‡§ø‡§§‡•ç‡§§‡§ø‡§Ø ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§ï‡•ã  ‡§ï‡§ø‡§∏‡•ç‡§§‡§æ",
                "‡§Ø‡§æ‡§§‡§æ‡§Ø‡§æ‡§§ ‡§á‡§®‡•ç‡§ß‡§® ‡§ñ‡§∞‡•ç‡§ö",
                "‡§Ö‡§®‡•ç‡§Ø ‡§Ö‡§®‡§ø‡§µ‡§æ‡§∞‡•ç‡§Ø ‡§ñ‡§∞‡•ç‡§ö",
                "‡§ú‡§Æ‡•ç‡§Æ‡§æ ‡§ñ‡§∞‡•ç‡§ö",
                "‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§¨‡§ö‡§§ ‡§∞‡§ï‡§Æ"
            ]
        )
        self.extended_layout.addWidget(self.income_expense_group["groupbox"])

        # Save button for extended form
        self.extended_save_button = QPushButton("Save")
        self.extended_save_button.setIcon(QIcon('icons/icon_btn.png'))
        self.extended_save_button.setFixedWidth(220)

        save_btn_layout = QHBoxLayout()
        save_btn_layout.addWidget(self.extended_save_button, alignment=Qt.AlignCenter)
        self.extended_layout.addLayout(save_btn_layout)

        self.extended_save_button.clicked.connect(self.save_extended_collateral_data)

        # --- End of extended form
        
        # Add both to stacked layout
        self.main_layout.addWidget(header_group)
        self.stack.addWidget(self.basic_widget)
        self.stack.addWidget(self.extended_widget)

        self.setLayout(self.main_layout)

        # Initially disable form
        # self.set_form_enabled(False)

        # Listen for session updates
        signal_bus.session_updated.connect(self.update_header)

    # def set_form_enabled(self, enabled):
    #     """Enable/disable form fields and buttons"""
    #     for i in range(self.form_layout.count()):
    #         widget = self.form_layout.itemAt(i).widget()
    #         if widget:
    #             widget.setEnabled(enabled)
    #     self.save_button.setEnabled(enabled)

    def update_header(self):
        """Update header with current session"""
        member = current_session.get("member_number")
        name = current_session.get("member_name")
        if member and name:
            self.header_label.setText(f"üìå Currently editing: {member} - {name}")
            # self.set_form_enabled(True)
        else:
            self.header_label.setText("üìå No member selected")
            # self.set_form_enabled(False)
        
    def showEvent(self, event):
        loan_type = current_session.get("loan_type", "")
        if loan_type == "‡§ñ‡§∞‡§ñ‡§æ‡§Å‡§ö‡•ã":
            self.stack.setCurrentWidget(self.basic_widget)
        else:
            self.stack.setCurrentWidget(self.extended_widget)
        super().showEvent(event)
       
    #     # Scroll area
    #     scroll = QScrollArea()
    #     scroll.setWidgetResizable(True)
    #     content = QWidget()
    #     form_layout = QFormLayout(content)
    #     scroll.setWidget(content)


    #     self.monthly_saving = QLineEdit()
    #     self.child_saving = QLineEdit()
        
    #     # Validate float input
    #     # validator = QDoubleValidator(0.0, 1000000.0, 2)

    #     for field in [self.monthly_saving, self.child_saving]:
    #         # field.setValidator(validator)
    #         field.editingFinished.connect(self.update_total_saving)

    #     form_layout.addRow("Monthly Saving:", self.monthly_saving)
    #     form_layout.addRow("Child Saving:", self.child_saving)
        
        
    #     self.total_saving = QLineEdit()
    #     self.total_saving.setReadOnly(True)
    #     form_layout.addRow("Total Saving:", self.total_saving)

    

    #     # --Setting layout --
    #     main_layout = QVBoxLayout()
    #     main_layout.addWidget(scroll)
    #     self.setLayout(main_layout)
    def create_dynamic_group(self, title, fields):
        groupbox = QGroupBox(title)
        layout = QVBoxLayout()
        rows = []

        add_button = QPushButton("‚ûï ‡§•‡§™‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç")
        layout.addWidget(add_button)

        def add_row():
            row_layout = QHBoxLayout()
            inputs = []
            for field in fields:
                line = QLineEdit()
                line.setPlaceholderText(field)
                inputs.append(line)
                row_layout.addWidget(line)
            rows.append(inputs)
            layout.insertLayout(layout.count() - 1, row_layout)

        add_button.clicked.connect(add_row)
        # Initial row on load
        add_row()        
        groupbox.setLayout(layout)

        return {
            "groupbox": groupbox,
            "rows": rows,
            "add_row": add_row
        }

    def update_total_saving(self):
        m = float(self.monthly_saving.text() or 0)
        c = float(self.child_saving.text() or 0)
        total = m + c
        self.total_saving.setText(f"{total:.2f}")
    

    def save_extended_collateral_data(self):
        # try:
        #     monthly = float(self.monthly_saving.text())
        #     child = float(self.child_saving.text())
        #     total = monthly + child

        #     data = {
        #         'monthly_saving': convert_to_nepali_digits(monthly),
        #         'child_saving': convert_to_nepali_digits(child),
        #         'total_saving': convert_to_nepali_digits(total)
        #     }

        #     save_collateral_info(data)
        #     print("‚úÖ Collateral data saved successfully!")

        # except Exception as e:
        #     print("‚ùå Error saving collateral data:", e)

        try:
            # Get current member number
            member_number = current_session.get("member_number", "").strip()
            if not member_number:
                QMessageBox.warning(self, "No Member Selected", "Please select a member first.")
                print("‚ùå No Member Selected")
                return
           
            # Save affiliated institutions
            affiliated_entries = [[field.text().strip() for field in row] for row in self.affiliated_group["rows"]]
            save_affiliated_institutions(member_number, affiliated_entries)

            # Save properties info
            property_entries = [[field.text().strip() for field in row] for row in self.property_collateral_group["rows"]]
            save_property_info(member_number, property_entries)

            # Save family info
            family_entries =[[field.text().strip() for field in row] for row in self.family_group["rows"]]
            save_family_info(member_number, family_entries)

            # Save Income and expense info
            income_expense_entries = []
            for field in self.income_expense_group["rows"][0]: # Only one
                label =  field.placeholderText()
                value = field.text().strip()
                typ = "income" if "‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä" in label else "expense"
                income_expense_entries.append([label, value, typ])
            save_income_expense(member_number, income_expense_entries)

            QMessageBox.information(self, "Collateral", "Collateral information is saved successfully." )

            print("‚úÖ All Colleteral data saved successfully!")
            
        except Exception as e:
            print("‚ùå Error saving collateral data:", e)

    def save_basic_collateral_data(self):
        try:
            # Get current member number
            member_number = current_session.get("member_number", "").strip()
            if not member_number:
                print("‚ùå No Member Selected")
                return
            
            # Save basic saving info
            monthly = float(self.monthly_saving.text())
            child = float(self.child_saving.text())
            total = monthly + child
                    
            data = {
                'monthly_saving': convert_to_nepali_digits(monthly),
                'child_saving': convert_to_nepali_digits(child),
                'total_saving': convert_to_nepali_digits(total)
            }

            save_collateral_info(data, member_number)
            QMessageBox.information(self, "Basic Collateral" "Basic Collateral info saved successfully.")
            self.clear_basic_form()
            print("‚úÖ Basic Collateral data saved successfully!")

        except Exception as e:
            print("‚ùå Error saving basic collateral data:", e)

    def save_basic_form(self):
        self.monthly_saving.clear()
        self.child_saving.clear()
        self.total_saving.clear()