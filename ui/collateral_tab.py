# ui/collateral_tab.py
from PyQt5.QtWidgets import (
    QWidget, QLabel, QVBoxLayout, QScrollArea, QFormLayout, QLineEdit, 
    QPushButton, QStackedLayout, QGroupBox, QHBoxLayout)
from PyQt5.QtCore import Qt, QSize
from PyQt5.QtGui import QIcon

from models.collateral_model import save_collateral_info
from utils.converter import convert_to_nepali_digits

class CollateralTab(QWidget):
    def __init__(self):
        super().__init__()

        self.main_layout = QVBoxLayout()
        self.setLayout(self.main_layout)

        self.stack = QStackedLayout()
        self.main_layout.addLayout(self.stack)    

        # Basic form "‡§ñ‡§∞‡§ñ‡§æ‡§Å‡§ö‡•ã"
        self.basic_widget = QWidget()
        self.basic_form_layout = QFormLayout(self.basic_widget)
        self.basic_form_layout.addRow(QLabel("‡§ñ‡§∞‡§ñ‡§æ‡§Å‡§ö‡•ã ‡§ã‡§£ ‡§¨‡§ö‡§§ ‡§∞‡•ã‡§ï‡•ç‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£:"))
        
        self.monthly_saving = QLineEdit()
        self.basic_form_layout.addRow("‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§¨‡§ö‡§§‡§É", self.monthly_saving)
        self.child_saving = QLineEdit()
        self.basic_form_layout.addRow("‡§¨‡§æ‡§≤ ‡§¨‡§ö‡§§‡§É", self.child_saving)

        for field in [self.monthly_saving, self.child_saving]:
            field.editingFinished.connect(self.update_total_saving)

        self.total_saving = QLineEdit()
        self.basic_form_layout.addRow("‡§ï‡•Å‡§≤ ‡§¨‡§ö‡§§:", self.total_saving)

        self.next_button = QPushButton("Save")
        self.next_button.setIcon(QIcon('icons/icon_btn.png'))
        self.next_button.setFixedWidth(220)
        # self.next_button.setIconSize(QSize(25, 25))
        # self.next_button.setStyleSheet("QPushButton::menu-indicator { padding-left: 6px; }"
        #                        "QPushButton { text-align: center; padding-left: 10px; }")
        # self.next_button.setStyleSheet("QPushButton { padding-left: 10px; }")
        self.next_button.clicked.connect(self.save_collateral_data)
        # self.basic_form_layout.addRow(self.next_button)
       
        
        next_button_layout = QHBoxLayout()        
        next_button_layout.addWidget(self.next_button, alignment=Qt.AlignCenter)
        self.basic_form_layout.addRow(next_button_layout)
        
       

        # Extended Form

        self.extended_widget = QWidget()
        self.extended_layout = QVBoxLayout(self.extended_widget)

        # Section 1: ‡§∏‡§Æ‡•ç‡§¨‡§¶‡•ç‡§ß ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£
        self.affiliated_group = self.create_dynamic_group(
            title = "üìå ‡§∏‡§Æ‡•ç‡§¨‡§¶‡•ç‡§ß ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£",
            fields = [
                "‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ / ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø‡§ï‡•ã ‡§®‡§æ‡§Æ", 
                "‡§†‡•á‡§ó‡§æ‡§®‡§æ", 
                "‡§™‡§¶", 
                "‡§Ö‡§®‡•Å‡§Æ‡§æ‡§®‡§ø‡§§ ‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§ï‡•à‡§´‡§ø‡§Ø‡§§"
            ]
        )
        self.extended_layout.addWidget(self.affiliated_group["groupbox"])

        # Section 2: ‡§ò‡§∞ ‡§ú‡§ó‡•ç‡§ó‡§æ‡§ï‡•ã ‡§ß‡§ø‡§§‡•ã‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£
        self.property_collateral_group = self.create_dynamic_group(
            title = "üèöÔ∏è ‡§ò‡§∞ ‡§ú‡§ó‡•ç‡§ó‡§æ‡§ï‡•ã ‡§ß‡§ø‡§§‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£",
            fields = [
                "‡§ú‡§ó‡•ç‡§ó‡§æ ‡§ß‡§®‡•Ä‡§ï‡•ã ‡§®‡§æ‡§Æ",
                "‡§¨‡§æ‡§¨‡•Å / ‡§™‡§§‡§ø",
                "‡§¨‡§æ‡§ú‡•á / ‡§∏‡§∏‡•Å‡§∞‡§æ",
                "‡§ú‡§ø‡§≤‡•ç‡§≤‡§æ",
                "‡§®.‡§™‡§æ./ ‡§ó‡§æ.‡§™‡§æ. ",
                "‡§∏‡§ø‡§ü ‡§®‡§Ç",
                "‡§µ‡§°‡§æ ‡§®‡§Ç",
                "‡§ï‡§ø‡§§‡•ç‡§§‡§æ ‡§®‡§Ç",
                "‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≤",
                "‡§ï‡§ø‡§∏‡§ø‡§Æ"
            ]
        )
        self.extended_layout.addWidget(self.property_collateral_group["groupbox"])

        # Section 3: ‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡•Ä‡§ï ‡§µ‡§ø‡§µ‡§∞‡§£
        self.family_group = self.create_dynamic_group(
            title = "üë©‚Äçüë©‚Äçüëß‚Äçüëß ‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡•Ä‡§ï ‡§µ‡§ø‡§µ‡§∞‡§£",
            fields = [
                "‡§®‡§æ‡§Æ",
                "‡§â‡§Æ‡•á‡§∞",
                "‡§ã‡§£ ‡§Æ‡§æ‡§ó‡§ï‡§∞‡•ç‡§§‡§æ ‡§∏‡§Å‡§ó‡§ï‡•ã ‡§®‡§æ‡§§‡§æ",
                "‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§Æ‡§æ ‡§∏‡§¶‡§∏‡•ç‡§Ø ‡§≠‡§è ‡§®‡§≠‡§è‡§ï‡•ã",
                "‡§™‡•á‡§∂‡§æ",
                "‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§Ü‡§Ø"
            ]
        )
        self.extended_layout.addWidget(self.family_group["groupbox"])

        # Section 4: ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä ‡§∞ ‡§ñ‡§∞‡•ç‡§ö ‡§µ‡§ø‡§µ‡§∞‡§£
        self.income_expense_group = self.create_dynamic_group(
            title = "üí∞ ‡§ã‡§£‡•Ä‡§ï‡•ã ‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä ‡§∞ ‡§ñ‡§∞‡•ç‡§ö‡§ï‡•ã ‡§µ‡§ø‡§µ‡§∞‡§£",
            fields = [
                "‡§ò‡§∞‡§≠‡§æ‡§°‡§æ ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§§‡§≤‡§¨ / ‡§ú‡•ç‡§Ø‡§æ‡§≤‡§æ ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø‡§ï‡•ã ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§ï‡•É‡§∑‡§ø‡§¨‡§æ‡§ü ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§µ‡•à‡§¶‡•á‡§∂‡§ø‡§ï ‡§∞‡•ã‡§ú‡§ó‡§æ‡§∞ ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§ï‡§Æ‡§ø‡§∏‡§® ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§™‡§æ‡§∞‡§ø‡§µ‡§æ‡§∞‡•Ä‡§ï ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§Ö‡§®‡•ç‡§Ø ‡§Ü‡§Æ‡•ç‡§¶‡§æ‡§®‡•Ä",
                "‡§ò‡§∞‡§≠‡§æ‡§°‡§æ / ‡§µ‡§ø‡§ú‡•Å‡§≤‡•Ä / ‡§™‡§æ‡§®‡•Ä, ‡§ï‡•á‡§µ‡§≤ ‡§ñ‡§∞‡•ç‡§ö",
                "‡§∏‡§û‡•ç‡§ö‡§æ‡§∞ ‡§ñ‡§∞‡•ç‡§ö",
                "‡§∞‡§æ‡§∏‡§® / ‡§≤‡§§‡•ç‡§§‡§æ‡§ï‡§™‡§°‡§æ",
                "‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ/‡§î‡§∑‡§ß‡•Ä ‡§â‡§™‡§ö‡§æ‡§∞ ‡§ñ‡§∞‡•ç‡§ö",
                "‡§Ö‡§®‡•ç‡§Ø ‡§µ‡§ø‡§§‡•ç‡§§‡§ø‡§Ø ‡§∏‡§Ç‡§∏‡•ç‡§•‡§æ‡§ï‡•ã  ‡§ï‡§ø‡§∏‡•ç‡§§‡§æ",
                "‡§Ø‡§æ‡§§‡§æ‡§Ø‡§æ‡§§ ‡§á‡§®‡•ç‡§ß‡§® ‡§ñ‡§∞‡•ç‡§ö",
                "‡§Ö‡§®‡•ç‡§Ø ‡§Ö‡§®‡§ø‡§µ‡§æ‡§∞‡•ç‡§Ø ‡§ñ‡§∞‡•ç‡§ö",
                "‡§ú‡§Æ‡•ç‡§Æ‡§æ ‡§ñ‡§∞‡•ç‡§ö",
                "‡§Æ‡§æ‡§∏‡§ø‡§ï ‡§¨‡§ö‡§§ ‡§∞‡§ï‡§Æ"
            ]
        )
        self.extended_layout.addWidget(self.income_expense_group["groupbox"])
        # --- End of extended form

        # Add both to stacked layout
        self.stack.addWidget(self.basic_widget)
        self.stack.addWidget(self.extended_widget)

        # Add a placeholder button for switching
        self.switch_button = QPushButton("Switch Form (for testing)")
        self.switch_button.clicked.connect(self.toggle_form)
        self.main_layout.addWidget(self.switch_button)

        # Default to basic form
        self.stack.setCurrentWidget(self.basic_widget)

    def toggle_form(self):
        if self.stack.currentWidget() == self.basic_widget:
            self.stack.setCurrentWidget(self.extended_widget)
        else:
            self.stack.setCurrentWidget(self.basic_widget)   







       
    #     # Scroll area
    #     scroll = QScrollArea()
    #     scroll.setWidgetResizable(True)
    #     content = QWidget()
    #     form_layout = QFormLayout(content)
    #     scroll.setWidget(content)


    #     self.monthly_saving = QLineEdit()
    #     self.child_saving = QLineEdit()
        
    #     # Validate float input
    #     # validator = QDoubleValidator(0.0, 1000000.0, 2)

    #     for field in [self.monthly_saving, self.child_saving]:
    #         # field.setValidator(validator)
    #         field.editingFinished.connect(self.update_total_saving)

    #     form_layout.addRow("Monthly Saving:", self.monthly_saving)
    #     form_layout.addRow("Child Saving:", self.child_saving)
        
        
    #     self.total_saving = QLineEdit()
    #     self.total_saving.setReadOnly(True)
    #     form_layout.addRow("Total Saving:", self.total_saving)

    

    #     # --Setting layout --
    #     main_layout = QVBoxLayout()
    #     main_layout.addWidget(scroll)
    #     self.setLayout(main_layout)

    def update_total_saving(self):
        m = float(self.monthly_saving.text() or 0)
        c = float(self.child_saving.text() or 0)
        total = m + c
        self.total_saving.setText(f"{total:.2f}")
    

    def save_collateral_data(self):
        try:
            monthly = float(self.monthly_saving.text())
            child = float(self.child_saving.text())
            total = monthly + child

            data = {
                'monthly_saving': convert_to_nepali_digits(monthly),
                'child_saving': convert_to_nepali_digits(child),
                'total_saving': convert_to_nepali_digits(total)
            }

            save_collateral_info(data)
            print("‚úÖ Collateral data saved successfully!")

        except Exception as e:
            print("‚ùå Error saving collateral data:", e)

    def create_dynamic_group(self, title, fields):
        groupbox = QGroupBox(title)
        layout = QVBoxLayout()
        rows = []

        add_button = QPushButton("‚ûï ‡§•‡§™‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç")
        layout.addWidget(add_button)

        def add_row():
            row_layout = QHBoxLayout()
            inputs = []
            for field in fields:
                line = QLineEdit()
                line.setPlaceholderText(field)
                inputs.append(line)
                row_layout.addWidget(line)
            rows.append(inputs)
            layout.insertLayout(layout.count() - 1, row_layout)

        add_button.clicked.connect(add_row)
        # Initial row on load
        add_row()        
        groupbox.setLayout(layout)

        return {
            "groupbox": groupbox,
            "rows": rows,
            "add_row": add_row
        }