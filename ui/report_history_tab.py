from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QTableWidget, QTableWidgetItem,
    QLabel, QLineEdit, QPushButton, QFileDialog, QHBoxLayout, QApplication
)
from PyQt5.QtCore import Qt, QUrl
from PyQt5.QtGui import QDesktopServices, QColor
import os
import sys
import csv
from nepali_datetime import date as nepali_date
from models.report_tracking_model import fetch_all_report_logs
from utils.converter import convert_to_nepali_digits
import logging

logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

class ReportHistoryTab(QWidget):
    def __init__(self):
        super().__init__()
        layout = QVBoxLayout(self)
        self.setStyleSheet("""
            QWidget {
                font-family: Arial;
                font-size: 14px;
            }
            QLabel {
                color: #333;
                min-width: 150px;
            }
            QLineEdit, QDateEdit {
                border: 1px solid #ddd;
                border-radius: 4px;
                padding: 8px;
                min-width: 250px;
                background-color: white;
            }
            QLineEdit:focus, QDateEdit:focus {
                border: 1px solid #3498db;
            }
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 10px 15px;
                border-radius: 4px;
                min-width: 100px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
            QTableWidget {
                border: 1px solid #ddd;
                border-radius: 4px;
                background-color: white;
            }
            QTableWidget::item:selected {
                background-color: #3498db;
                color: white;
            }
        """)

        # Filters
        filter_layout = QHBoxLayout()
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("üîç Filter by Member No / Report Type / Date (YYYY-MM-DD) / Time")
        self.search_input.textChanged.connect(self.filter_table)
        filter_layout.addWidget(self.search_input)

        self.show_all_btn = QPushButton("Show All Reports")
        self.show_all_btn.clicked.connect(self.show_all_reports)
        filter_layout.addWidget(self.show_all_btn)

        self.export_btn = QPushButton("Export to CSV")
        self.export_btn.clicked.connect(self.export_to_csv)
        filter_layout.addWidget(self.export_btn)

        self.open_folder_btn = QPushButton("Open Report Folder")
        self.open_folder_btn.clicked.connect(self.open_report_location)
        filter_layout.addWidget(self.open_folder_btn)

        layout.addLayout(filter_layout)

        # Report Table
        self.table = QTableWidget()
        self.table.setColumnCount(6)
        self.table.setHorizontalHeaderLabels(["Member No.", "Report Type", "Generated By", "File Location", "Date & Time", "Status"])
        self.table.setSelectionBehavior(self.table.SelectRows)
        self.table.setEditTriggers(self.table.NoEditTriggers)
        self.table.cellDoubleClicked.connect(self.open_report_file)
        self.table.setSortingEnabled(True)
        self.table.horizontalHeader().setStretchLastSection(True)
        self.table.setAlternatingRowColors(True)

        layout.addWidget(QLabel("üìÑ Report Generation History:"))
        layout.addWidget(self.table)

        self.load_data()

    def load_data(self):
        today_bs = nepali_date.today().strftime('%Y-%m-%d')
        try:
            self.all_logs = fetch_all_report_logs(date_filter=today_bs)
            self.populate_table(self.all_logs)
            self.show_status_message(f"‡§ï‡•Å‡§≤ {convert_to_nepali_digits(len(self.all_logs))} ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü‡§π‡§∞‡•Ç {today_bs} ‡§ï‡•ã ‡§≤‡§æ‡§ó‡§ø ‡§≤‡•ã‡§° ‡§ó‡§∞‡§ø‡§Ø‡•ã")
        except Exception as e:
            logging.error(f"Error loading reports: {e}")
            self.show_status_message(f"‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü‡§π‡§∞‡•Ç ‡§≤‡•ã‡§° ‡§ó‡§∞‡•ç‡§® ‡§Ö‡§∏‡§´‡§≤: {e}")

    def filter_table(self):
        keyword = self.search_input.text().lower()
        self.table.setRowCount(0)
        filtered_logs = [
            log for log in self.all_logs
            if any(keyword in str(field).lower() for field in log.values())
        ]
        self.populate_table(filtered_logs)
        self.show_status_message(f"‡§ï‡•Å‡§≤ {convert_to_nepali_digits(len(filtered_logs))} ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü‡§π‡§∞‡•Ç ‡§´‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ó‡§∞‡§ø‡§Ø‡•ã")

    def open_report_file(self, row, column):
        file_path_item = self.table.item(row, 3)  # File Location is column 3
        if not file_path_item:
            self.show_status_message("‡§´‡§æ‡§á‡§≤ ‡§™‡§• ‡§´‡•á‡§≤‡§æ ‡§™‡§∞‡•á‡§®")
            return

        path = os.path.abspath(file_path_item.text())
        logging.debug(f"Trying to open file: {path}")

        if os.path.exists(path):
            try:
                if sys.platform == 'win32':
                    os.startfile(path)
                else:
                    QDesktopServices.openUrl(QUrl.fromLocalFile(path))
            except Exception as e:
                self.show_status_message(f"‡§´‡§æ‡§á‡§≤ ‡§ñ‡•ã‡§≤‡•ç‡§® ‡§Ö‡§∏‡§´‡§≤: {e}")
        else:
            self.show_status_message(f"‡§´‡§æ‡§á‡§≤ ‡§´‡•á‡§≤‡§æ ‡§™‡§∞‡•á‡§®: {path}")

    def open_report_location(self):
        selected = self.table.selectionModel().selectedRows()
        if not selected:
            self.show_status_message("‡§ï‡•É‡§™‡§Ø‡§æ ‡§è‡§ï ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§õ‡§æ‡§®‡•ç‡§®‡•Å‡§π‡•ã‡§∏‡•ç")
            return

        row = selected[0].row()
        file_path_item = self.table.item(row, 3)
        if not file_path_item:
            self.show_status_message("‡§´‡§æ‡§á‡§≤ ‡§™‡§• ‡§´‡•á‡§≤‡§æ ‡§™‡§∞‡•á‡§®")
            return

        path = os.path.abspath(file_path_item.text())
        dir_path = os.path.dirname(path)
        logging.debug(f"Trying to open folder: {dir_path}")

        try:
            QDesktopServices.openUrl(QUrl.fromLocalFile(dir_path))
        except Exception as e:
            self.show_status_message(f"‡§´‡•ã‡§≤‡•ç‡§°‡§∞ ‡§ñ‡•ã‡§≤‡•ç‡§® ‡§Ö‡§∏‡§´‡§≤: {e}")

    def export_to_csv(self):
        path, _ = QFileDialog.getSaveFileName(self, "Save CSV", "", "CSV Files (*.csv)")
        if not path:
            return

        try:
            with open(path, 'w', newline='', encoding='utf-8') as csvfile:
                writer = csv.writer(csvfile)
                writer.writerow(["Member No.", "Report Type", "Generated By", "File Location", "Date & Time", "Status"])
                for row in range(self.table.rowCount()):
                    row_data = []
                    for col in range(self.table.columnCount()):
                        item = self.table.item(row, col)
                        row_data.append(item.text() if item else "")
                    writer.writerow(row_data)
            self.show_status_message(f"{path} ‡§Æ‡§æ ‡§®‡§ø‡§∞‡•ç‡§Ø‡§æ‡§§ ‡§ó‡§∞‡§ø‡§Ø‡•ã")
            logging.debug(f"Exported table to {path}")
        except Exception as e:
            self.show_status_message(f"CSV ‡§®‡§ø‡§∞‡•ç‡§Ø‡§æ‡§§ ‡§Ö‡§∏‡§´‡§≤: {e}")
            logging.error(f"Export CSV failed: {e}")

    def show_all_reports(self):
        try:
            self.all_logs = fetch_all_report_logs()
            self.populate_table(self.all_logs)
            self.show_status_message(f"‡§ï‡•Å‡§≤ {convert_to_nepali_digits(len(self.all_logs))} ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü‡§π‡§∞‡•Ç ‡§≤‡•ã‡§° ‡§ó‡§∞‡§ø‡§Ø‡•ã (‡§∏‡§¨‡•à)")
        except Exception as e:
            logging.error(f"Error loading all reports: {e}")
            self.show_status_message(f"‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü‡§π‡§∞‡•Ç ‡§≤‡•ã‡§° ‡§ó‡§∞‡•ç‡§® ‡§Ö‡§∏‡§´‡§≤: {e}")

    def populate_table(self, logs):
        self.table.setRowCount(0)
        for row_idx, log in enumerate(logs):
            self.table.insertRow(row_idx)
            for col, key in enumerate(["member_number", "report_type", "generated_by", "file_path", "date"]):
                item = QTableWidgetItem(str(log[key]))
                item.setToolTip(str(log[key]))
                self.table.setItem(row_idx, col, item)
            status_item = QTableWidgetItem()
            if os.path.exists(log["file_path"]):
                status_item.setText("Available")
                status_item.setForeground(QColor("green"))
            else:
                status_item.setText("Deleted")
                status_item.setForeground(QColor("red"))
            self.table.setItem(row_idx, 5, status_item)
        self.table.resizeColumnsToContents()

    def show_status_message(self, message):
        window = QApplication.instance().activeWindow()
        if window and hasattr(window, 'statusBar') and window.statusBar():
            window.statusBar().showMessage(message, 5000)
        else:
            logging.info(f"Status bar unavailable, logging message: {message}")
            # Removed QMessageBox to prevent popups
            logging.debug(f"Status message: {message}")