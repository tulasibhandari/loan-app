# ui/report_history_tab.py

from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QTableWidget, QTableWidgetItem,
    QLabel, QLineEdit, QPushButton, QFileDialog, QHBoxLayout, QMessageBox
)
from PyQt5.QtCore import Qt
import os
import sys
# import subprocess
from PyQt5.QtCore import QUrl
from PyQt5.QtGui import QDesktopServices

from nepali_datetime import date as nepali_date

from models.report_tracking_model import fetch_all_report_logs

class ReportHistoryTab(QWidget):
    def __init__(self):
        super().__init__()
        layout = QVBoxLayout(self)
        # Apply styles
        self.setStyleSheet("""
            QWidget {
                    font-family: Arial;
                    font-size: 14px
           }
            
            QLabel {
                    color: #333;
                    min-width: 150px;
            }
            QLineEdit, QDateEdit {
                           border: 1px solid #ddd;
                           border-radius: 4px;
                           padding: 8px;
                           min-width:250px;
                           background-color: white;
            }
            QLineEdit:focus, QDateEdit:focus {
                        border: 1px solid #3498db;
            }
            QPushButton {
                           background-color: #4CAF50;
                           color: white;
                           border: none;
                           padding: 10px 15px;
                           border-radius: 4px;
                           min-width: 100px;
                           }
            QPushButton:hover {
                           background-color: #45a049;
                           }                        
        """)

        # Filters
        filter_layout = QHBoxLayout()
        self.search_input = QLineEdit()
        self.search_input.setPlaceholderText("üîç Filter by Member No / Report Type / Date")
        self.search_input.textChanged.connect(self.filter_table)
        filter_layout.addWidget(self.search_input)

        self.show_all_btn = QPushButton("Show All Reports")
        self.show_all_btn.clicked.connect(self.show_all_reports)
        filter_layout.addWidget(self.show_all_btn)

        layout.addLayout(filter_layout)

        #-- Report Table --
        self.table = QTableWidget()
        self.table.setColumnCount(5)
        self.table.setHorizontalHeaderLabels(["Member No.", "Report Type", "File Location", "Generated By", "Date"])
        self.table.setSelectionBehavior(self.table.SelectRows)
        self.table.setEditTriggers(self.table.NoEditTriggers)
        self.table.cellDoubleClicked.connect(self.open_report_file)

        layout.addWidget(QLabel("üìÑ Report Generation History:"))
        layout.addWidget(self.table)

        self.load_data()

    def load_data(self):
        today_bs = nepali_date.today().strftime('%Y-%m-%d')
        self.all_logs = fetch_all_report_logs(date_filter=today_bs)
        # self.table.setRowCount(len(self.all_logs))
        
        # for row_idx, log in enumerate(self.all_logs):
        #     for col, value in enumerate(log):
        #         self.table.setItem(row_idx, col, QTableWidgetItem(str(value))) 
        self.populate_table(self.all_logs)    
    def filter_table(self):
        keyword = self.search_input.text().lower()
        self.table.setRowCount(0)

        for log in self.all_logs:
            if any(keyword in str(field).lower() for field in log):
                row_idx  =self.table.rowCount()
                self.table.insertRow(row_idx)
                for col, value in enumerate(log):
                    self.table.setItem(row_idx, col, QTableWidgetItem(str(value)))

    def open_report_file(self, row, column):
        file_path_item = self.table.item(row, 2)
        if not file_path_item:
            QMessageBox.warning(self, "Invalid Entry", "No file path found in this row.")
            return

        path = os.path.abspath(file_path_item.text())
        print(f"üìÅ Trying to open: {path}")

        if os.path.exists(path):
            try:
                if sys.platform == 'win32':
                    os.startfile(path)
                else:
                    QDesktopServices.openUrl(QUrl.fromLocalFile(path))
            except Exception as e:
                QMessageBox.critical(self, "Open Error", f"Failed to open file:\n{e}")
        else:
            QMessageBox.warning(self, "File Not Found", f"The selected file could not be found:\n{path}")
    
    def refresh_table(self):
        self.table.setRowCount(0)  # Clear existing rows

        from models.report_tracking_model import fetch_all_report_logs
        reports = fetch_all_report_logs()
        
        for row_idx, report in enumerate(reports):
            self.table.insertRow(row_idx)
            self.table.setItem(row_idx, 0, QTableWidgetItem(report["member_number"]))
            self.table.setItem(row_idx, 1, QTableWidgetItem(report["report_type"]))
            self.table.setItem(row_idx, 2, QTableWidgetItem(report["generated_by"]))
            self.table.setItem(row_idx, 3, QTableWidgetItem(report["date"]))
            self.table.setItem(row_idx, 4, QTableWidgetItem(report["file_path"]))

    def show_all_reports(self):
        from models.report_tracking_model import fetch_all_report_logs
        self.all_logs = fetch_all_report_logs()
        self.populate_table(self.all_logs)

    def populate_table(self, logs):
        self.table.setRowCount(0)
        for row_idx, log in enumerate(logs):
            self.table.insertRow(row_idx)
            for col, value in enumerate(log):
                self.table.setItem(row_idx, col, QTableWidgetItem(str(value)))